// Generated from Sift.g4 by ANTLR 4.9.2

   package com.rchowell.sift.language.antlr;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class SiftLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.9.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		PIPE=1, MAPS=2, LP=3, RP=4, COMMA=5, SQUOTE=6, EQ=7, GT=8, LT=9, GTE=10, 
		LTE=11, AND=12, OR=13, PLUS=14, MINUS=15, MULT=16, DIV=17, MOD=18, MIN=19, 
		MAX=20, SUM=21, AVG=22, COUNT=23, SELECT=24, PROJECT=25, GROUP=26, SORT=27, 
		LIMIT=28, DISTINCT=29, ON=30, AS=31, BY=32, OUTER=33, LEFT=34, RIGHT=35, 
		ASC=36, DESC=37, TRUE=38, FALSE=39, JOIN=40, CROSS=41, UNION=42, DIFF=43, 
		INTERSECT=44, ID=45, ID_QUOTED=46, STRING=47, INT=48, WS=49, UNRECOGNIZED=50;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"PIPE", "MAPS", "LP", "RP", "COMMA", "SQUOTE", "EQ", "GT", "LT", "GTE", 
			"LTE", "AND", "OR", "PLUS", "MINUS", "MULT", "DIV", "MOD", "MIN", "MAX", 
			"SUM", "AVG", "COUNT", "SELECT", "PROJECT", "GROUP", "SORT", "LIMIT", 
			"DISTINCT", "ON", "AS", "BY", "OUTER", "LEFT", "RIGHT", "ASC", "DESC", 
			"TRUE", "FALSE", "JOIN", "CROSS", "UNION", "DIFF", "INTERSECT", "ID", 
			"ID_QUOTED", "STRING", "INT", "WS", "UNRECOGNIZED"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'|>'", "'->'", "'('", "')'", "','", "'''", "'='", "'>'", "'<'", 
			"'>='", "'<='", "'&&'", "'||'", "'+'", "'-'", "'*'", "'/'", "'%'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "PIPE", "MAPS", "LP", "RP", "COMMA", "SQUOTE", "EQ", "GT", "LT", 
			"GTE", "LTE", "AND", "OR", "PLUS", "MINUS", "MULT", "DIV", "MOD", "MIN", 
			"MAX", "SUM", "AVG", "COUNT", "SELECT", "PROJECT", "GROUP", "SORT", "LIMIT", 
			"DISTINCT", "ON", "AS", "BY", "OUTER", "LEFT", "RIGHT", "ASC", "DESC", 
			"TRUE", "FALSE", "JOIN", "CROSS", "UNION", "DIFF", "INTERSECT", "ID", 
			"ID_QUOTED", "STRING", "INT", "WS", "UNRECOGNIZED"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public SiftLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Sift.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\64\u020f\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\3\2"+
		"\3\2\3\2\3\3\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3"+
		"\n\3\n\3\13\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\16\3\16\3\16\3\17\3\17"+
		"\3\20\3\20\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24"+
		"\3\24\3\24\3\24\5\24\u009b\n\24\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25"+
		"\3\25\5\25\u00a6\n\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26"+
		"\u00b1\n\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u00bc\n"+
		"\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3"+
		"\30\3\30\5\30\u00cd\n\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31"+
		"\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u00e1\n\31\3\32\3\32"+
		"\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32"+
		"\3\32\3\32\3\32\3\32\3\32\5\32\u00f8\n\32\3\33\3\33\3\33\3\33\3\33\3\33"+
		"\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u0109\n\33\3\34\3\34"+
		"\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u0117\n\34\3\35"+
		"\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35"+
		"\5\35\u0128\n\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36"+
		"\u0142\n\36\3\37\3\37\3\37\3\37\5\37\u0148\n\37\3 \3 \3 \3 \5 \u014e\n"+
		" \3!\3!\3!\3!\5!\u0154\n!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\""+
		"\u0160\n\"\3#\3#\3#\3#\3#\3#\3#\3#\5#\u016a\n#\3$\3$\3$\3$\3$\3$\3$\3"+
		"$\3$\3$\5$\u0176\n$\3%\3%\3%\3%\3%\3%\5%\u017e\n%\3&\3&\3&\3&\3&\3&\3"+
		"&\3&\5&\u0188\n&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u0192\n\'\3(\3(\3"+
		"(\3(\3(\3(\3(\3(\3(\3(\5(\u019e\n(\3)\3)\3)\3)\3)\3)\3)\3)\5)\u01a8\n"+
		")\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u01b5\n*\3+\3+\3+\3+\3+\3+\3+\3"+
		"+\3+\3+\3+\5+\u01c2\n+\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u01cd\n,\3-\3-\3"+
		"-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u01e2\n-\3.\6.\u01e5"+
		"\n.\r.\16.\u01e6\3/\3/\3/\3/\7/\u01ed\n/\f/\16/\u01f0\13/\3/\3/\3\60\3"+
		"\60\6\60\u01f6\n\60\r\60\16\60\u01f7\3\60\7\60\u01fb\n\60\f\60\16\60\u01fe"+
		"\13\60\3\60\3\60\3\61\6\61\u0203\n\61\r\61\16\61\u0204\3\62\6\62\u0208"+
		"\n\62\r\62\16\62\u0209\3\62\3\62\3\63\3\63\2\2\64\3\3\5\4\7\5\t\6\13\7"+
		"\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25"+
		")\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O"+
		")Q*S+U,W-Y.[/]\60_\61a\62c\63e\64\3\2\b\6\2//C\\aac|\3\2bb\4\2C\\c|\5"+
		"\2\62;C\\c|\3\2\62;\5\2\13\f\17\17\"\"\2\u023e\2\3\3\2\2\2\2\5\3\2\2\2"+
		"\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3"+
		"\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2"+
		"\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2"+
		"\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2"+
		"\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2"+
		"\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2"+
		"\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y"+
		"\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2"+
		"\2\2\3g\3\2\2\2\5j\3\2\2\2\7m\3\2\2\2\to\3\2\2\2\13q\3\2\2\2\rs\3\2\2"+
		"\2\17u\3\2\2\2\21w\3\2\2\2\23y\3\2\2\2\25{\3\2\2\2\27~\3\2\2\2\31\u0081"+
		"\3\2\2\2\33\u0084\3\2\2\2\35\u0087\3\2\2\2\37\u0089\3\2\2\2!\u008b\3\2"+
		"\2\2#\u008d\3\2\2\2%\u008f\3\2\2\2\'\u009a\3\2\2\2)\u00a5\3\2\2\2+\u00b0"+
		"\3\2\2\2-\u00bb\3\2\2\2/\u00cc\3\2\2\2\61\u00e0\3\2\2\2\63\u00f7\3\2\2"+
		"\2\65\u0108\3\2\2\2\67\u0116\3\2\2\29\u0127\3\2\2\2;\u0141\3\2\2\2=\u0147"+
		"\3\2\2\2?\u014d\3\2\2\2A\u0153\3\2\2\2C\u015f\3\2\2\2E\u0169\3\2\2\2G"+
		"\u0175\3\2\2\2I\u017d\3\2\2\2K\u0187\3\2\2\2M\u0191\3\2\2\2O\u019d\3\2"+
		"\2\2Q\u01a7\3\2\2\2S\u01b4\3\2\2\2U\u01c1\3\2\2\2W\u01cc\3\2\2\2Y\u01e1"+
		"\3\2\2\2[\u01e4\3\2\2\2]\u01e8\3\2\2\2_\u01f3\3\2\2\2a\u0202\3\2\2\2c"+
		"\u0207\3\2\2\2e\u020d\3\2\2\2gh\7~\2\2hi\7@\2\2i\4\3\2\2\2jk\7/\2\2kl"+
		"\7@\2\2l\6\3\2\2\2mn\7*\2\2n\b\3\2\2\2op\7+\2\2p\n\3\2\2\2qr\7.\2\2r\f"+
		"\3\2\2\2st\7)\2\2t\16\3\2\2\2uv\7?\2\2v\20\3\2\2\2wx\7@\2\2x\22\3\2\2"+
		"\2yz\7>\2\2z\24\3\2\2\2{|\7@\2\2|}\7?\2\2}\26\3\2\2\2~\177\7>\2\2\177"+
		"\u0080\7?\2\2\u0080\30\3\2\2\2\u0081\u0082\7(\2\2\u0082\u0083\7(\2\2\u0083"+
		"\32\3\2\2\2\u0084\u0085\7~\2\2\u0085\u0086\7~\2\2\u0086\34\3\2\2\2\u0087"+
		"\u0088\7-\2\2\u0088\36\3\2\2\2\u0089\u008a\7/\2\2\u008a \3\2\2\2\u008b"+
		"\u008c\7,\2\2\u008c\"\3\2\2\2\u008d\u008e\7\61\2\2\u008e$\3\2\2\2\u008f"+
		"\u0090\7\'\2\2\u0090&\3\2\2\2\u0091\u0092\7O\2\2\u0092\u0093\7K\2\2\u0093"+
		"\u009b\7P\2\2\u0094\u0095\7O\2\2\u0095\u0096\7k\2\2\u0096\u009b\7p\2\2"+
		"\u0097\u0098\7o\2\2\u0098\u0099\7k\2\2\u0099\u009b\7p\2\2\u009a\u0091"+
		"\3\2\2\2\u009a\u0094\3\2\2\2\u009a\u0097\3\2\2\2\u009b(\3\2\2\2\u009c"+
		"\u009d\7O\2\2\u009d\u009e\7C\2\2\u009e\u00a6\7Z\2\2\u009f\u00a0\7O\2\2"+
		"\u00a0\u00a1\7c\2\2\u00a1\u00a6\7z\2\2\u00a2\u00a3\7o\2\2\u00a3\u00a4"+
		"\7c\2\2\u00a4\u00a6\7z\2\2\u00a5\u009c\3\2\2\2\u00a5\u009f\3\2\2\2\u00a5"+
		"\u00a2\3\2\2\2\u00a6*\3\2\2\2\u00a7\u00a8\7U\2\2\u00a8\u00a9\7W\2\2\u00a9"+
		"\u00b1\7O\2\2\u00aa\u00ab\7U\2\2\u00ab\u00ac\7w\2\2\u00ac\u00b1\7o\2\2"+
		"\u00ad\u00ae\7u\2\2\u00ae\u00af\7w\2\2\u00af\u00b1\7o\2\2\u00b0\u00a7"+
		"\3\2\2\2\u00b0\u00aa\3\2\2\2\u00b0\u00ad\3\2\2\2\u00b1,\3\2\2\2\u00b2"+
		"\u00b3\7C\2\2\u00b3\u00b4\7X\2\2\u00b4\u00bc\7I\2\2\u00b5\u00b6\7C\2\2"+
		"\u00b6\u00b7\7x\2\2\u00b7\u00bc\7i\2\2\u00b8\u00b9\7c\2\2\u00b9\u00ba"+
		"\7x\2\2\u00ba\u00bc\7i\2\2\u00bb\u00b2\3\2\2\2\u00bb\u00b5\3\2\2\2\u00bb"+
		"\u00b8\3\2\2\2\u00bc.\3\2\2\2\u00bd\u00be\7E\2\2\u00be\u00bf\7Q\2\2\u00bf"+
		"\u00c0\7W\2\2\u00c0\u00c1\7P\2\2\u00c1\u00cd\7V\2\2\u00c2\u00c3\7E\2\2"+
		"\u00c3\u00c4\7q\2\2\u00c4\u00c5\7w\2\2\u00c5\u00c6\7p\2\2\u00c6\u00cd"+
		"\7v\2\2\u00c7\u00c8\7e\2\2\u00c8\u00c9\7q\2\2\u00c9\u00ca\7w\2\2\u00ca"+
		"\u00cb\7p\2\2\u00cb\u00cd\7v\2\2\u00cc\u00bd\3\2\2\2\u00cc\u00c2\3\2\2"+
		"\2\u00cc\u00c7\3\2\2\2\u00cd\60\3\2\2\2\u00ce\u00cf\7U\2\2\u00cf\u00d0"+
		"\7G\2\2\u00d0\u00d1\7N\2\2\u00d1\u00d2\7G\2\2\u00d2\u00d3\7E\2\2\u00d3"+
		"\u00e1\7V\2\2\u00d4\u00d5\7U\2\2\u00d5\u00d6\7g\2\2\u00d6\u00d7\7n\2\2"+
		"\u00d7\u00d8\7g\2\2\u00d8\u00d9\7e\2\2\u00d9\u00e1\7v\2\2\u00da\u00db"+
		"\7u\2\2\u00db\u00dc\7g\2\2\u00dc\u00dd\7n\2\2\u00dd\u00de\7g\2\2\u00de"+
		"\u00df\7e\2\2\u00df\u00e1\7v\2\2\u00e0\u00ce\3\2\2\2\u00e0\u00d4\3\2\2"+
		"\2\u00e0\u00da\3\2\2\2\u00e1\62\3\2\2\2\u00e2\u00e3\7R\2\2\u00e3\u00e4"+
		"\7T\2\2\u00e4\u00e5\7Q\2\2\u00e5\u00e6\7L\2\2\u00e6\u00e7\7G\2\2\u00e7"+
		"\u00e8\7E\2\2\u00e8\u00f8\7V\2\2\u00e9\u00ea\7R\2\2\u00ea\u00eb\7t\2\2"+
		"\u00eb\u00ec\7q\2\2\u00ec\u00ed\7l\2\2\u00ed\u00ee\7g\2\2\u00ee\u00ef"+
		"\7e\2\2\u00ef\u00f8\7v\2\2\u00f0\u00f1\7r\2\2\u00f1\u00f2\7t\2\2\u00f2"+
		"\u00f3\7q\2\2\u00f3\u00f4\7l\2\2\u00f4\u00f5\7g\2\2\u00f5\u00f6\7e\2\2"+
		"\u00f6\u00f8\7v\2\2\u00f7\u00e2\3\2\2\2\u00f7\u00e9\3\2\2\2\u00f7\u00f0"+
		"\3\2\2\2\u00f8\64\3\2\2\2\u00f9\u00fa\7I\2\2\u00fa\u00fb\7T\2\2\u00fb"+
		"\u00fc\7Q\2\2\u00fc\u00fd\7W\2\2\u00fd\u0109\7R\2\2\u00fe\u00ff\7I\2\2"+
		"\u00ff\u0100\7t\2\2\u0100\u0101\7q\2\2\u0101\u0102\7w\2\2\u0102\u0109"+
		"\7r\2\2\u0103\u0104\7i\2\2\u0104\u0105\7t\2\2\u0105\u0106\7q\2\2\u0106"+
		"\u0107\7w\2\2\u0107\u0109\7r\2\2\u0108\u00f9\3\2\2\2\u0108\u00fe\3\2\2"+
		"\2\u0108\u0103\3\2\2\2\u0109\66\3\2\2\2\u010a\u010b\7U\2\2\u010b\u010c"+
		"\7Q\2\2\u010c\u010d\7T\2\2\u010d\u0117\7V\2\2\u010e\u010f\7U\2\2\u010f"+
		"\u0110\7q\2\2\u0110\u0111\7t\2\2\u0111\u0117\7v\2\2\u0112\u0113\7u\2\2"+
		"\u0113\u0114\7q\2\2\u0114\u0115\7t\2\2\u0115\u0117\7v\2\2\u0116\u010a"+
		"\3\2\2\2\u0116\u010e\3\2\2\2\u0116\u0112\3\2\2\2\u01178\3\2\2\2\u0118"+
		"\u0119\7N\2\2\u0119\u011a\7K\2\2\u011a\u011b\7O\2\2\u011b\u011c\7K\2\2"+
		"\u011c\u0128\7V\2\2\u011d\u011e\7N\2\2\u011e\u011f\7k\2\2\u011f\u0120"+
		"\7o\2\2\u0120\u0121\7k\2\2\u0121\u0128\7v\2\2\u0122\u0123\7n\2\2\u0123"+
		"\u0124\7k\2\2\u0124\u0125\7o\2\2\u0125\u0126\7k\2\2\u0126\u0128\7v\2\2"+
		"\u0127\u0118\3\2\2\2\u0127\u011d\3\2\2\2\u0127\u0122\3\2\2\2\u0128:\3"+
		"\2\2\2\u0129\u012a\7F\2\2\u012a\u012b\7K\2\2\u012b\u012c\7U\2\2\u012c"+
		"\u012d\7V\2\2\u012d\u012e\7K\2\2\u012e\u012f\7P\2\2\u012f\u0130\7E\2\2"+
		"\u0130\u0142\7V\2\2\u0131\u0132\7F\2\2\u0132\u0133\7k\2\2\u0133\u0134"+
		"\7u\2\2\u0134\u0135\7v\2\2\u0135\u0136\7k\2\2\u0136\u0137\7p\2\2\u0137"+
		"\u0138\7e\2\2\u0138\u0142\7v\2\2\u0139\u013a\7f\2\2\u013a\u013b\7k\2\2"+
		"\u013b\u013c\7u\2\2\u013c\u013d\7v\2\2\u013d\u013e\7k\2\2\u013e\u013f"+
		"\7p\2\2\u013f\u0140\7e\2\2\u0140\u0142\7v\2\2\u0141\u0129\3\2\2\2\u0141"+
		"\u0131\3\2\2\2\u0141\u0139\3\2\2\2\u0142<\3\2\2\2\u0143\u0144\7Q\2\2\u0144"+
		"\u0148\7P\2\2\u0145\u0146\7q\2\2\u0146\u0148\7p\2\2\u0147\u0143\3\2\2"+
		"\2\u0147\u0145\3\2\2\2\u0148>\3\2\2\2\u0149\u014a\7C\2\2\u014a\u014e\7"+
		"U\2\2\u014b\u014c\7c\2\2\u014c\u014e\7u\2\2\u014d\u0149\3\2\2\2\u014d"+
		"\u014b\3\2\2\2\u014e@\3\2\2\2\u014f\u0150\7D\2\2\u0150\u0154\7[\2\2\u0151"+
		"\u0152\7d\2\2\u0152\u0154\7{\2\2\u0153\u014f\3\2\2\2\u0153\u0151\3\2\2"+
		"\2\u0154B\3\2\2\2\u0155\u0156\7Q\2\2\u0156\u0157\7W\2\2\u0157\u0158\7"+
		"V\2\2\u0158\u0159\7G\2\2\u0159\u0160\7T\2\2\u015a\u015b\7q\2\2\u015b\u015c"+
		"\7w\2\2\u015c\u015d\7v\2\2\u015d\u015e\7g\2\2\u015e\u0160\7t\2\2\u015f"+
		"\u0155\3\2\2\2\u015f\u015a\3\2\2\2\u0160D\3\2\2\2\u0161\u0162\7N\2\2\u0162"+
		"\u0163\7G\2\2\u0163\u0164\7H\2\2\u0164\u016a\7V\2\2\u0165\u0166\7n\2\2"+
		"\u0166\u0167\7g\2\2\u0167\u0168\7h\2\2\u0168\u016a\7v\2\2\u0169\u0161"+
		"\3\2\2\2\u0169\u0165\3\2\2\2\u016aF\3\2\2\2\u016b\u016c\7T\2\2\u016c\u016d"+
		"\7K\2\2\u016d\u016e\7I\2\2\u016e\u016f\7J\2\2\u016f\u0176\7V\2\2\u0170"+
		"\u0171\7t\2\2\u0171\u0172\7k\2\2\u0172\u0173\7i\2\2\u0173\u0174\7j\2\2"+
		"\u0174\u0176\7v\2\2\u0175\u016b\3\2\2\2\u0175\u0170\3\2\2\2\u0176H\3\2"+
		"\2\2\u0177\u0178\7C\2\2\u0178\u0179\7U\2\2\u0179\u017e\7E\2\2\u017a\u017b"+
		"\7c\2\2\u017b\u017c\7u\2\2\u017c\u017e\7e\2\2\u017d\u0177\3\2\2\2\u017d"+
		"\u017a\3\2\2\2\u017eJ\3\2\2\2\u017f\u0180\7F\2\2\u0180\u0181\7G\2\2\u0181"+
		"\u0182\7U\2\2\u0182\u0188\7E\2\2\u0183\u0184\7f\2\2\u0184\u0185\7g\2\2"+
		"\u0185\u0186\7u\2\2\u0186\u0188\7e\2\2\u0187\u017f\3\2\2\2\u0187\u0183"+
		"\3\2\2\2\u0188L\3\2\2\2\u0189\u018a\7V\2\2\u018a\u018b\7T\2\2\u018b\u018c"+
		"\7W\2\2\u018c\u0192\7G\2\2\u018d\u018e\7v\2\2\u018e\u018f\7t\2\2\u018f"+
		"\u0190\7w\2\2\u0190\u0192\7g\2\2\u0191\u0189\3\2\2\2\u0191\u018d\3\2\2"+
		"\2\u0192N\3\2\2\2\u0193\u0194\7H\2\2\u0194\u0195\7C\2\2\u0195\u0196\7"+
		"N\2\2\u0196\u0197\7U\2\2\u0197\u019e\7G\2\2\u0198\u0199\7h\2\2\u0199\u019a"+
		"\7c\2\2\u019a\u019b\7n\2\2\u019b\u019c\7u\2\2\u019c\u019e\7g\2\2\u019d"+
		"\u0193\3\2\2\2\u019d\u0198\3\2\2\2\u019eP\3\2\2\2\u019f\u01a0\7L\2\2\u01a0"+
		"\u01a1\7Q\2\2\u01a1\u01a2\7K\2\2\u01a2\u01a8\7P\2\2\u01a3\u01a4\7l\2\2"+
		"\u01a4\u01a5\7q\2\2\u01a5\u01a6\7k\2\2\u01a6\u01a8\7p\2\2\u01a7\u019f"+
		"\3\2\2\2\u01a7\u01a3\3\2\2\2\u01a8R\3\2\2\2\u01a9\u01b5\7Z\2\2\u01aa\u01ab"+
		"\7E\2\2\u01ab\u01ac\7T\2\2\u01ac\u01ad\7Q\2\2\u01ad\u01ae\7U\2\2\u01ae"+
		"\u01b5\7U\2\2\u01af\u01b0\7e\2\2\u01b0\u01b1\7t\2\2\u01b1\u01b2\7q\2\2"+
		"\u01b2\u01b3\7u\2\2\u01b3\u01b5\7u\2\2\u01b4\u01a9\3\2\2\2\u01b4\u01aa"+
		"\3\2\2\2\u01b4\u01af\3\2\2\2\u01b5T\3\2\2\2\u01b6\u01c2\7W\2\2\u01b7\u01b8"+
		"\7W\2\2\u01b8\u01b9\7P\2\2\u01b9\u01ba\7K\2\2\u01ba\u01bb\7Q\2\2\u01bb"+
		"\u01c2\7P\2\2\u01bc\u01bd\7w\2\2\u01bd\u01be\7p\2\2\u01be\u01bf\7k\2\2"+
		"\u01bf\u01c0\7q\2\2\u01c0\u01c2\7p\2\2\u01c1\u01b6\3\2\2\2\u01c1\u01b7"+
		"\3\2\2\2\u01c1\u01bc\3\2\2\2\u01c2V\3\2\2\2\u01c3\u01cd\7^\2\2\u01c4\u01c5"+
		"\7F\2\2\u01c5\u01c6\7K\2\2\u01c6\u01c7\7H\2\2\u01c7\u01cd\7H\2\2\u01c8"+
		"\u01c9\7f\2\2\u01c9\u01ca\7k\2\2\u01ca\u01cb\7h\2\2\u01cb\u01cd\7h\2\2"+
		"\u01cc\u01c3\3\2\2\2\u01cc\u01c4\3\2\2\2\u01cc\u01c8\3\2\2\2\u01cdX\3"+
		"\2\2\2\u01ce\u01e2\7(\2\2\u01cf\u01d0\7K\2\2\u01d0\u01d1\7P\2\2\u01d1"+
		"\u01d2\7V\2\2\u01d2\u01d3\7G\2\2\u01d3\u01d4\7T\2\2\u01d4\u01d5\7U\2\2"+
		"\u01d5\u01d6\7G\2\2\u01d6\u01d7\7E\2\2\u01d7\u01e2\7V\2\2\u01d8\u01d9"+
		"\7k\2\2\u01d9\u01da\7p\2\2\u01da\u01db\7v\2\2\u01db\u01dc\7g\2\2\u01dc"+
		"\u01dd\7t\2\2\u01dd\u01de\7u\2\2\u01de\u01df\7g\2\2\u01df\u01e0\7e\2\2"+
		"\u01e0\u01e2\7v\2\2\u01e1\u01ce\3\2\2\2\u01e1\u01cf\3\2\2\2\u01e1\u01d8"+
		"\3\2\2\2\u01e2Z\3\2\2\2\u01e3\u01e5\t\2\2\2\u01e4\u01e3\3\2\2\2\u01e5"+
		"\u01e6\3\2\2\2\u01e6\u01e4\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7\\\3\2\2\2"+
		"\u01e8\u01ee\7b\2\2\u01e9\u01ed\n\3\2\2\u01ea\u01eb\7b\2\2\u01eb\u01ed"+
		"\7b\2\2\u01ec\u01e9\3\2\2\2\u01ec\u01ea\3\2\2\2\u01ed\u01f0\3\2\2\2\u01ee"+
		"\u01ec\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\u01f1\3\2\2\2\u01f0\u01ee\3\2"+
		"\2\2\u01f1\u01f2\7b\2\2\u01f2^\3\2\2\2\u01f3\u01f5\7$\2\2\u01f4\u01f6"+
		"\t\4\2\2\u01f5\u01f4\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7\u01f5\3\2\2\2\u01f7"+
		"\u01f8\3\2\2\2\u01f8\u01fc\3\2\2\2\u01f9\u01fb\t\5\2\2\u01fa\u01f9\3\2"+
		"\2\2\u01fb\u01fe\3\2\2\2\u01fc\u01fa\3\2\2\2\u01fc\u01fd\3\2\2\2\u01fd"+
		"\u01ff\3\2\2\2\u01fe\u01fc\3\2\2\2\u01ff\u0200\7$\2\2\u0200`\3\2\2\2\u0201"+
		"\u0203\t\6\2\2\u0202\u0201\3\2\2\2\u0203\u0204\3\2\2\2\u0204\u0202\3\2"+
		"\2\2\u0204\u0205\3\2\2\2\u0205b\3\2\2\2\u0206\u0208\t\7\2\2\u0207\u0206"+
		"\3\2\2\2\u0208\u0209\3\2\2\2\u0209\u0207\3\2\2\2\u0209\u020a\3\2\2\2\u020a"+
		"\u020b\3\2\2\2\u020b\u020c\b\62\2\2\u020cd\3\2\2\2\u020d\u020e\13\2\2"+
		"\2\u020ef\3\2\2\2$\2\u009a\u00a5\u00b0\u00bb\u00cc\u00e0\u00f7\u0108\u0116"+
		"\u0127\u0141\u0147\u014d\u0153\u015f\u0169\u0175\u017d\u0187\u0191\u019d"+
		"\u01a7\u01b4\u01c1\u01cc\u01e1\u01e6\u01ec\u01ee\u01f7\u01fc\u0204\u0209"+
		"\3\2\3\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}